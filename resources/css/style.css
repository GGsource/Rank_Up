/* Include the palette file */
@import url("palette.css");

body {
    background-color: var(--primary);
}

/* Make the bottom container where all images begin larger */
#imageContainer {
    width: calc(var(--rowWidth) + var(--resolution));
    /* center the container */
    margin-left: auto;
    margin-right: auto;
    /* Remove spacing between elements in the container*/
    display: flex;
    flex-wrap: wrap;
    /* Make it start off at least 2 images tall */
    height: calc(var(--resolution) * 2);
    /* DELETEME: this should adapt to how many imgs we actually have later on */

    background: repeating-linear-gradient(
        135deg,
        rgba(0, 0, 0, 0),
        rgba(0, 0, 0, 0.4) 6px
    );
}
/* 
- rowList (contains all rowFulls)
-       rowFull
-             rowTab
-                     addRowAboveButton
-                     dragHandle
-                     addRowBelowButton
-             mainRow
-                     rowHeader
-                             rowTitle
-                             resetDeleteContainer
-                                     resetButton
-                                     emptyDiv
-                                     deleteButton
-                     rowBody
*/
#rowList {
    /* Center */
    display: flex;
    flex-direction: column;
    align-items: center;
}

.rowFull {
    position: relative;
    display: flex;
    flex-direction: row;
    height: var(--resolution);
    margin-bottom: 50px; /* Adds spacing between rows */
}
.rowTabWrapper {
    background: repeating-linear-gradient(
        320deg,
        rgba(0, 0, 0, 0),
        rgba(255, 255, 0, 0.4) 5px
    );
}
.rowTab {
    /* Size it to parent height and half the width and list children as column */
    height: 100%;
    width: calc(var(--resolution) / 2);
    display: flex;
    flex-direction: column;

    /* Make the tab hang off the left side of the parent */
    position: absolute;
    top: 0;
    left: 0;
    transform: translateX(-100%);

    /* Add padding without altering size */
    padding: 0 5px 0 10px;
    box-sizing: border-box;
    gap: 10px; /* Space between buttons */

    /* Round corners off left side */
    border-radius: var(--radius) 0 0 var(--radius);

    /* DELETEME: Debugging colors */
    background: repeating-linear-gradient(
        290deg,
        rgba(0, 0, 0, 0),
        rgba(0, 255, 0, 0.4) 5px
    );
    /* TESTME: Hide overflow so the user cannot click on the rounded corners and activate the child buttons */
    overflow: hidden;
}
/* .tabButton {
    background: repeating-linear-gradient(
        30deg,
        rgba(0, 0, 0, 0),
        rgba(255, 0, 127, 0.4) 5px
    );
    border: 1px solid rgba(60, 0, 20, 0.6);
} */

.mainRow {
    /* Take up full vertical space allotted by parent */
    height: 100%;
    display: flex;
    flex-direction: row;

    background: repeating-linear-gradient(
        45deg,
        rgba(0, 0, 0, 0),
        rgba(182, 24, 182, 0.4) 60px
    );
}
.rowHeader {
    position: relative; /* Allows the resetDeleteContainer to be positioned relative to this */
    /* Make the header be a square */
    width: var(--resolution);
    /* Make its contents be listed horizontally */
    display: flex;
    flex-direction: row;
    background: repeating-linear-gradient(
        135deg,
        rgba(0, 0, 0, 0),
        rgba(255, 0, 0, 0.4) 40px
    );
}
.rowBody {
    /* Make the rowBody take up the remaining space in the rowTab */
    width: var(--rowWidth);
    background: repeating-linear-gradient(
        135deg,
        rgba(0, 0, 0, 0),
        rgba(0, 0, 255, 0.4) 40px
    );
    /* Align items within to the left */
    display: flex;
    flex-direction: row;
}

/* Resize all images to be uniform squares */
.rankingImage {
    width: var(--resolution);
    height: var(--resolution);
    /* FIXME: This currently stretches the image. */
    /* In future we should crop them instead. */
}

.rowTitle {
    width: 100%;
    justify-content: center;
    align-items: center;
    display: flex;
    font: 2em "Alice", sans-serif;
    color: white;
}

.resetDeleteContainer {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: absolute;
    right: 0;
}

.resetDeleteImage {
    width: calc(var(--resolution) / 3);
}

.addRowButton {
    width: 100%;
}

.dragHandle {
    /* Make this section take up the remaining space not occupied by the addrow buttons */
    flex-grow: 1;
    min-height: 0;
    /* FIXME: This image stretched to full width of its parent rowTab, it should not do this and maintain aspect ratio instead */
}

/* TODO: Make sure rowTab's draggable section extends the full
length available after the addRowAbove and addRowBelow buttons
are accounted for. This way, even if the row has a ton of images
and the row is 10 images tall, the draggable section will grow to match */
